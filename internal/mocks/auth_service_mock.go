// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/interfaces/auth_service.go

// Package mock_interfaces is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DmitriyV003/bonus/internal/models"
	interfaces "github.com/DmitriyV003/bonus/internal/services/interfaces"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, login, password string) (*interfaces.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(*interfaces.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, login, password)
}

// LoginByUser mocks base method.
func (m *MockAuthService) LoginByUser(user *models.User) (*interfaces.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByUser", user)
	ret0, _ := ret[0].(*interfaces.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByUser indicates an expected call of LoginByUser.
func (mr *MockAuthServiceMockRecorder) LoginByUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByUser", reflect.TypeOf((*MockAuthService)(nil).LoginByUser), user)
}

// ParseTokenWithClaims mocks base method.
func (m *MockAuthService) ParseTokenWithClaims(token *interfaces.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTokenWithClaims", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseTokenWithClaims indicates an expected call of ParseTokenWithClaims.
func (mr *MockAuthServiceMockRecorder) ParseTokenWithClaims(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTokenWithClaims", reflect.TypeOf((*MockAuthService)(nil).ParseTokenWithClaims), token)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), token)
}
