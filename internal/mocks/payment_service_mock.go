// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/interfaces/payment_service.go

// Package mock_interfaces is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DmitriyV003/bonus/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// CreateAccrualPayment mocks base method.
func (m *MockPaymentService) CreateAccrualPayment(ctx context.Context, user *models.User, amount int64, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccrualPayment", ctx, user, amount, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccrualPayment indicates an expected call of CreateAccrualPayment.
func (mr *MockPaymentServiceMockRecorder) CreateAccrualPayment(ctx, user, amount, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccrualPayment", reflect.TypeOf((*MockPaymentService)(nil).CreateAccrualPayment), ctx, user, amount, orderNumber)
}

// CreateWithdrawPayment mocks base method.
func (m *MockPaymentService) CreateWithdrawPayment(ctx context.Context, user *models.User, amount int64, orderNumber string) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawPayment", ctx, user, amount, orderNumber)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawPayment indicates an expected call of CreateWithdrawPayment.
func (mr *MockPaymentServiceMockRecorder) CreateWithdrawPayment(ctx, user, amount, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawPayment", reflect.TypeOf((*MockPaymentService)(nil).CreateWithdrawPayment), ctx, user, amount, orderNumber)
}
