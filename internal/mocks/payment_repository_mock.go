// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/payment_repository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	models "github.com/DmitriyV003/bonus/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(ctx context.Context, payment *models.Payment) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payment)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, payment)
}

// GetByIDWithUser mocks base method.
func (m *MockPaymentRepository) GetByIDWithUser(ctx context.Context, id int64) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithUser", ctx, id)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithUser indicates an expected call of GetByIDWithUser.
func (mr *MockPaymentRepositoryMockRecorder) GetByIDWithUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithUser", reflect.TypeOf((*MockPaymentRepository)(nil).GetByIDWithUser), ctx, id)
}

// GetWithdrawsByUser mocks base method.
func (m *MockPaymentRepository) GetWithdrawsByUser(ctx context.Context, user *models.User) ([]*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawsByUser", ctx, user)
	ret0, _ := ret[0].([]*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawsByUser indicates an expected call of GetWithdrawsByUser.
func (mr *MockPaymentRepositoryMockRecorder) GetWithdrawsByUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawsByUser", reflect.TypeOf((*MockPaymentRepository)(nil).GetWithdrawsByUser), ctx, user)
}

// WithdrawnAmountByUser mocks base method.
func (m *MockPaymentRepository) WithdrawnAmountByUser(ctx context.Context, user *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawnAmountByUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawnAmountByUser indicates an expected call of WithdrawnAmountByUser.
func (mr *MockPaymentRepositoryMockRecorder) WithdrawnAmountByUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawnAmountByUser", reflect.TypeOf((*MockPaymentRepository)(nil).WithdrawnAmountByUser), ctx, user)
}
